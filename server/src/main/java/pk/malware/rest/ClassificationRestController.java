package pk.malware.rest;

import java.io.FileInputStream;
import java.util.Base64;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import pk.malware.domain.AttributeInstance;
import pk.malware.domain.Classification;
import pk.malware.domain.ModelPath;
import pk.malware.service.ClassificationService;
import pk.malware.service.ManifestAttributeParser;
import weka.classifiers.Classifier;
import weka.classifiers.trees.LMT;
import weka.core.Instance;
import weka.core.SerializationHelper;

import javax.validation.constraints.NotEmpty;

@RestController
public class ClassificationRestController {

    private final ManifestAttributeParser manifestAttributeParser;
    private final ClassificationService classificationService;

    @Autowired
    public ClassificationRestController(ManifestAttributeParser manifestAttributeParser,
                                        ClassificationService classificationService) {
        this.manifestAttributeParser = manifestAttributeParser;
        this.classificationService = classificationService;
    }

    @PostMapping("/classify")
    public Classification classify(@RequestParam(value="content") @NotEmpty String content) {
        byte[] decodedContent = Base64.getDecoder().decode(content);
        List<String> requestedPermissions = manifestAttributeParser.parse(decodedContent);
        AttributeInstance attributeInstance = new AttributeInstance(requestedPermissions);
        return classificationService.classify(attributeInstance);
    }

}
